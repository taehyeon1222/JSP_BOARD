<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nth.mapper.PostMapper">

    <select id="getAllPosts" resultType="com.nth.domain.Post">
        SELECT * FROM POST
    </select>
<!--
    <select id="getPostById" parameterType="long" resultType="com.nth.domain.Post">
        SELECT * FROM POST WHERE ID = #{id}
    </select>
-->
    <!--게시글 조인 조회-->
    <select id="getPostById" parameterType="long" resultType="com.nth.domain.Post">
        SELECT P.ID, P.TITLE, P.CONTENT, P.CREATED_DATE AS createdDate, P.USER_ID AS userId, P.VIEWS AS views,
               U.ID AS "userInfo.id", U.USERNAME AS "userInfo.username",
               U.CREATED_AT AS "userInfo.createdDate"
        FROM "POST" P
                 JOIN "USERINFO" U ON P.USER_ID = U.ID
        WHERE P.ID = #{id}
    </select>

<!--유저 추가
    <insert id="insertUserPost" parameterType="com.nth.domain.Post">
        INSERT INTO POST (ID, TITLE, CONTENT, CREATED_DATE, USER_ID)
        VALUES (SEQ_POST_ID.NEXTVAL, #{title}, #{content}, SYSDATE, #{userInfo.id})
    </insert>
-->
    <!--
    <insert id="insertPost" parameterType="com.nth.domain.Post">
        INSERT INTO POST (ID, TITLE, CONTENT, CREATED_DATE)
        VALUES (SEQ_POST_ID.NEXTVAL, #{title}, #{content}, SYSDATE)
-->
<!--
    <insert id="insertUserPost" parameterType="com.nth.domain.Post" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <selectKey resultType="Long" keyProperty="id" order="BEFORE">
            SELECT SEQ_POST_ID.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO POST (ID, TITLE, CONTENT, CREATED_DATE, USER_ID)
        VALUES (#{id}, #{title}, #{content}, SYSDATE, #{userInfo.id})
    </insert>
-->

    <insert id="insertUserPost" parameterType="com.nth.domain.Post" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <selectKey resultType="Long" keyProperty="id" order="BEFORE">
            SELECT SEQ_POST_ID.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO POST (ID, TITLE, CONTENT, CREATED_DATE, USER_ID, CATEGORY)
        VALUES (#{id}, #{title}, #{content}, SYSDATE, #{userInfo.id}, #{category})
    </insert>

    <update id="updatePost" parameterType="com.nth.domain.Post">
        UPDATE POST SET TITLE = #{title}, CONTENT = #{content}, CATEGORY = #{category} WHERE ID = #{id}
    </update>

    <delete id="deletePost" parameterType="long">
        DELETE FROM POST WHERE ID = #{id}
    </delete>


    <!--검색
    <select id="searchPostList" resultType="com.nth.domain.Post" parameterType="map">
        SELECT * FROM (
                          SELECT ROW_NUMBER() OVER (ORDER BY id DESC) row_num, Post.*
                          FROM Post
                          WHERE title LIKE '%'||#{title}||'%'
                      )
        WHERE row_num BETWEEN #{startList}+1 AND #{startList}+#{listSize}
    </select>
-->

    <!--제목과 내용으로 검색 페이징 카테고리
    <select id="searchPostList" resultType="com.nth.domain.Post" parameterType="map">
        SELECT P.id, P.title, P.content, P.views AS views, P.created_date as createdDate,
               U.ID AS "userInfo.id", U.USERNAME AS "userInfo.username",
               COALESCE(L.CNT, 0) AS "likeCount"
        FROM (
                 SELECT ROW_NUMBER() OVER (ORDER BY created_date DESC) row_num, Post.*
                 FROM Post
                 WHERE (title LIKE '%'||#{title}||'%' OR content LIKE '%'||#{title}||'%')
             ) P
                 JOIN "USERINFO" U ON P.user_id = U.id
                 LEFT JOIN (
            SELECT post_id, COUNT(*) as CNT FROM likes GROUP BY post_id
        ) L ON P.ID = L.post_id
        WHERE row_num BETWEEN #{startList}+1 AND #{startList}+#{listSize}
    </select>
    -->


    <!--제목과 내용으로 검색 페이징 카테고리-->
    <select id="searchPostTitleCategoryList" resultType="com.nth.domain.Post" parameterType="map">
        SELECT P.id, P.title, P.content, P.views AS views, P.created_date as createdDate,
               U.ID AS "userInfo.id", U.USERNAME AS "userInfo.username",
               COALESCE(L.CNT, 0) AS "likeCount"
        FROM (
                 SELECT ROW_NUMBER() OVER (ORDER BY created_date DESC) row_num, Post.*
                 FROM Post
                 WHERE (title LIKE '%'||#{title}||'%' OR content LIKE '%'||#{title}||'%')
                   AND category = #{category}
             ) P
                 JOIN "USERINFO" U ON P.user_id = U.id
                 LEFT JOIN (
            SELECT post_id, COUNT(*) as CNT FROM likes GROUP BY post_id
        ) L ON P.ID = L.post_id
        WHERE row_num BETWEEN #{startList}+1 AND #{startList}+#{listSize}
    </select>


    <!--유저 이름으로 게시글 검색-->
    <select id="searchPostUsernameList" resultType="com.nth.domain.Post" parameterType="map">
        SELECT P.id, P.title, P.views, P.created_date AS createdDate,
               P.userId AS "userInfo.id", P.username AS "userInfo.username",
               COALESCE(L.CNT, 0) AS "likeCount"
        FROM (
                 SELECT ROW_NUMBER() OVER (ORDER BY created_date DESC) row_num, P.*, U.username, U.id AS userId
                 FROM post P
                          JOIN userinfo U ON P.user_id = U.id
                 WHERE U.username LIKE '%'||#{username}||'%'
             ) P
                 LEFT JOIN (
            SELECT post_id, COUNT(*) as CNT FROM likes GROUP BY post_id
        ) L ON P.ID = L.post_id
        WHERE row_num BETWEEN #{startList}+1 AND #{startList}+#{listSize}
        ORDER BY P.row_num
    </select>

    <!--유저 이름 과 카테고리로 검색-->
    <select id="searchPostUsernameCategoryList" resultType="com.nth.domain.Post" parameterType="map">
        SELECT P.id, P.title, P.views, P.created_date AS createdDate,
               P.userId AS "userInfo.id", P.username AS "userInfo.username",
               COALESCE(L.CNT, 0) AS "likeCount"
        FROM (
                 SELECT ROW_NUMBER() OVER (ORDER BY created_date DESC) row_num, P.*, U.username, U.id AS userId
                 FROM post P
                          JOIN userinfo U ON P.user_id = U.id
                 WHERE U.username LIKE '%'||#{username}||'%'
                   AND P.category = #{category}
             ) P
                 LEFT JOIN (
            SELECT post_id, COUNT(*) as CNT FROM likes GROUP BY post_id
        ) L ON P.ID = L.post_id
        WHERE row_num BETWEEN #{startList}+1 AND #{startList}+#{listSize}
        ORDER BY P.row_num
    </select>


    <!--페이징 이제 사용하지 않음 검색기능이 없음-->
    <select id="getPostList" resultType="com.nth.domain.Post" parameterType="com.nth.service.Pagination">
        SELECT P.id, P.title, P.content, P.created_date as createdDate,  P.views AS views ,U.ID AS "userInfo.id", U.USERNAME AS "userInfo.username",
              U.CREATED_AT AS "userInfo.createdDate"
        FROM (
                 SELECT ROW_NUMBER() OVER (ORDER BY created_date DESC) row_num, Post.*
                 FROM Post
             ) p
                 JOIN "USERINFO" U ON P.USER_ID = U.ID
        WHERE row_num BETWEEN #{startList}+1 AND #{startList}+#{listSize}
    </select>


    <!--페이징 카운트 쿼리-->
    <select id="getPostCountByCategory" resultType="int" parameterType="string">
        SELECT COUNT(*) FROM Post
        WHERE category = '공지사항'
    </select>


    <!--페이징 카운트 검색 쿼리-->
    <select id="getPostCountByTitle" resultType="int" parameterType="string">
        SELECT COUNT(*) FROM Post WHERE title LIKE '%'||#{title}||'%' OR content LIKE '%'||#{title}||'%'
    </select>

    <!--페이징 카운트 검색 쿼리 에 카테고리를 추가함-->
    <select id="getPostCountByTitleAndCategory" resultType="int" parameterType="map">
        SELECT COUNT(*) FROM Post
        WHERE (title LIKE '%'||#{title}||'%' OR content LIKE '%'||#{title}||'%')
          AND category = #{category}
    </select>


    <!--유저 아이디 카운트 검색 쿼리-->
    <select id="getPostCountByUserName" resultType="int" parameterType="string">
        SELECT COUNT(*)
        FROM Post P
                 INNER JOIN USERINFO U ON P.USER_ID = U.ID
        WHERE U.USERNAME LIKE '%' || #{userName} || '%'
    </select>

    <!--유저 아이디 카운트 검색 쿼리 카테고리 추가-->
    <select id="getPostCountByUserNameAndCategory" resultType="int" parameterType="string">
        SELECT COUNT(*)
        FROM Post P
                 INNER JOIN USERINFO U ON P.USER_ID = U.ID
        WHERE U.USERNAME LIKE '%' || #{userName} || '%'
          AND category = #{category}
    </select>



    <!--조회수-->
    <update id="increaseViewCount" parameterType="long">
        UPDATE Post SET views = views + 1 WHERE id = #{id}
    </update>




</mapper>
